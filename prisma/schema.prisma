// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum ImageSource {
  Manual
  Auto
}

enum ImageSyncStatus {
  Synced
  NotSync
}

enum ProductSyncStatus {
  Published
  Scheduled
  NotPublished
}

model Image {
  id                 String            @id @default(cuid())
  name               String
  source             ImageSource
  sourceLink         String?           @map(name: "source_link")
  cloudLink          String            @map(name: "cloud_link")
  backupLink         String?           @map(name: "backup_link")
  provider           String?
  providerRef        String?           @map(name: "provider_ref")
  syncStatus         ImageSyncStatus   @default(NotSync) @map(name: "sync_status")
  product            Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId          String?           @map(name: "product_id")
  createdAt          DateTime          @default(now()) @map(name: "created_at")
  updatedAt          DateTime          @updatedAt @map(name: "updated_at")
  productVariation   ProductVariation? @relation(fields: [productVariationId], references: [id], onDelete: SetNull)
  productVariationId String?

  @@map(name: "images")
}

model Product {
  id              String  @id @default(cuid())
  name            String?
  price           Float?
  description     String?
  descriptionHtml String? @map(name: "description_html")
  category        String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  images      Image[]
  collections ProductsOnCollections[]
  shops       ProductsOnShops[]
  variants    ProductVariation[]

  @@map(name: "products")
}

model ProductVariation {
  id    String  @id @default(cuid())
  sku   String?
  price Float?
  key   String
  value String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  images    Image[]
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map(name: "product_variations")
}

model Collection {
  id          String  @id @default(cuid())
  name        String  @unique
  publicName  String?
  description String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  products ProductsOnCollections[]

  @@map(name: "collections")
}

model ProductsOnCollections {
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String     @map(name: "product_id")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String     @map(name: "collection_id")
  priority     Int?
  assignedAt   DateTime   @default(now()) @map(name: "assigned_at")

  @@id([productId, collectionId])
  @@map(name: "products_on_collections")
}

enum ShopSyncStatus {
  PushedAll
  Scheduled
  NotPublished
}

enum ShopStatus {
  Active
  Draft
  Closed
}

model Shop {
  id         String         @id @default(cuid())
  name       String         @unique
  syncStatus ShopSyncStatus @default(NotPublished) @map(name: "sync_status")
  status     ShopStatus     @default(Draft) @map(name: "status")

  provider   String @default("self")
  shopDomain String @default("") @map("shop_domain")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  maskImages        ShopMaskImage[]
  products          ProductsOnShops[]
  job               Job[]
  credential        ShopCredentials   @relation(fields: [shopCredentialsId], references: [id])
  shopCredentialsId String            @map("shop_credentials_id")

  @@map(name: "shops")
}

model ShopCredentials {
  id         String  @id @default(cuid())
  shopDomain String  @default("") @map("shop_domain")
  apiKey     String? @map(name: "api_key")
  Shop       Shop[]

  @@map(name: "shop_credentials")
}

model ProductsOnShops {
  shop       Shop              @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId     String            @map(name: "shop_id")
  product    Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String            @map(name: "product_id")
  priority   Int?
  status     ProductSyncStatus @default(NotPublished)
  assignedAt DateTime          @default(now()) @map(name: "assigned_at")

  @@id([shopId, productId])
  @@map(name: "products_on_shops")
}

model ShopMaskImage {
  id        String   @id @default(cuid())
  src       String
  positionX Int      @map(name: "position_x")
  positionY Int      @map(name: "position_y")
  scale     Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  shop   Shop?   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String? @map(name: "shop_id")

  @@map(name: "shop_mask_images")
}

enum JobStatus {
  Scheduled
  Succeeded
  Failed
}

model Job {
  id               String    @id @default(cuid())
  status           JobStatus @default(Scheduled) @map(name: "status")
  productIds       String[]  @default([]) @map("product_ids")
  uploadedProducts Int       @default(0) @map("uploaded_products")
  batchSize        Int       @default(0) @map("batch_size")

  shop   Shop?  @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String @map(name: "shop_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "jobs")
}
